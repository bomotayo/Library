{"version":3,"sources":["components/Form.js","actions/index.js","components/BookList.js","components/BookDetail.js","components/App.js","reducers/index.js","reducers/bookReducer.js","reducers/selectedBookReducer.js","index.js","localStorage.js"],"names":["connect","fetchBook","book","dispatch","type","id","v4","props","useForm","register","handleSubmit","errors","alertRef","useRef","className","ref","onSubmit","data","e","current","style","display","setTimeout","target","reset","name","required","color","title","message","author","value","pattern","pageNo","read","onClick","toggle","state","selectBook","payload","books","JSON","parse","localStorage","getItem","bookArray","uniqueBooks","_","uniqWith","isEqual","map","key","selectedBook","genre","href","rel","App","useState","seen","setState","togglePop","combineReducers","action","persistedState","serializedState","err","loadState","store","createStore","reducers","applyMiddleware","thunk","subscribe","throttle","stringify","setItem","saveState","getState","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.1afaa2da.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { connect } from 'react-redux';\nimport { fetchBook } from '../actions';\n\n\nconst Form = (props) => {\n\n  const { register, handleSubmit, errors } = useForm();\n  const alertRef = useRef();\n\n\n  const handleClick = () => {\n    props.toggle();\n  };\n\n  const onSubmit = (data, e) => {\n    //Sends book info to fetchbook action creator\n    props.fetchBook(data);\n\n    //Notification showing book has been submitted\n    alertRef.current.style.display = 'block';\n    setTimeout(function(){\n      alertRef.current.style.display = 'none';\n    },1000);\n\n    //Form fields resets on submit\n    e.target.reset();\n  }\n  return(\n    <div className=\"modal\">\n      <div className=\"modal_content\">\n        <div className=\"ui container\">\n              <h2 className=\"ui dividing header\">New Book</h2>\n              <div className=\"alert\" ref={alertRef}>Your book has been submitted</div>\n              <form className=\"ui form\" onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"field\">\n                  <label>Title</label>\n                  <input \n                  name=\"title\" \n                  ref={register({\n                    required: \"Required\"\n                  })}\n                  />\n                <p style={{color: 'red'}}>{errors.title && errors.title.message}</p>\n                </div>\n                <div className=\"field\">\n                  <label>Author</label>\n                  <input \n                    name=\"author\" \n                    ref={register({\n                      required: \"Required\"\n                    })}\n                    />\n                <p style={{color: 'red'}}>{errors.author && errors.author.message}</p>\n                </div>                \n                <div className=\"field\">\n                  <label>Genre</label>\n                  <select name=\"genre\" ref={register({ required: true })}>\n                      <option value=\"\">Select</option>\n                      <option value=\"Romance\">Romance</option>\n                      <option value=\"Mystery\">Mystery</option>\n                      <option value=\"Fiction\">Fiction</option>\n                      <option value=\"Horror\">Horror</option>\n                      <option value=\"Self-help\">Self-help</option>\n                      <option value=\"Children\">Children</option>\n                      <option value=\"Biography\">Biography</option>\n                      <option value=\"Other\">Other</option>\n                  </select>\n                </div>\n                <div className=\"field\">\n                  <label>No. Pages</label>\n                  <input \n                  name=\"pageNo\" \n                  ref={register({\n                    required: \"Required\",\n                    pattern: {\n                    value:  /\\d/gi,\n                    message: \"Must be a number\"\n                    }\n                  })}\n                  />\n                <p style={{color: 'red'}}>{errors.pageNo && errors.pageNo.message}</p>\n                </div>\n                <div>\n\n                  <label>Have you read this book?</label>\n                    &#160;\n                    &#160;\n                    <label>Yes</label>\n                    <input name=\"read\" type=\"radio\" value=\"Yes\" ref={register({ required: \"Required\" })}/>\n                    &#160;\n                    &#160;\n                    <label>No</label>\n                    <input name=\"read\" type=\"radio\" value=\"No\" ref={register({ required: \"Required\" })}/>            \n                  </div>\n                  <p style={{color: 'red'}}>{errors.read && errors.read.message}</p>\n                  <br/>\n                  <br/>\n                  <div>\n                    <button className=\"primary ui button\" type=\"submit\">Submit</button>\n                    <button className=\"red ui button close-btn\" onClick={handleClick}>Close</button>\n                  </div>\n              \n              </form>\n              </div>\n      </div>\n    </div>\n  )\n}\n\nexport default connect(null, {fetchBook })(Form);","import {v4} from 'node-uuid';\n\nexport const fetchBook = (book) => {\n  return dispatch => {\n\n    dispatch({\n      type: 'FETCH_BOOK',\n      id: v4(),\n      book\n    })\n  }\n}\n\nexport const selectBook = (book) => {\n\n  return {\n    type: 'SELECTED_BOOK',\n    payload: book\n  };\n};","import React from 'react';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { selectBook } from '../actions';\n\n\n\nconst BookList = (props) => {\n\n  let books = JSON.parse(localStorage.getItem('state'));\n  let bookArray = books === null ? [] : books.book;\n  let uniqueBooks = _.uniqWith(bookArray, _.isEqual);\n\n  // console.log(uniqueBooks)\n\n  const renderList = () => {\n    if(books === null){\n      return (\n        <h3 className=\"nobook-text\">You currently have no books stored in your library.</h3>\n      )\n    }\n    else{\n      return uniqueBooks.map((book) => {\n        return(\n          <div className=\"item\" key={book.title}>\n          <div className=\"right floated content\">\n            <button \n              className=\"ui button primary\"\n              onClick={() => props.selectBook(book)}\n            >\n              Select\n            </button>\n          </div>\n          <div className=\"content\">{book.title}</div>\n        </div>       \n        );\n      });\n    }\n  }\n\n  return(\n    <div>\n      <div className=\"ui divided list\">{renderList()}</div>\n    </div>\n  )\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    book: state.book\n  }\n}\n\nexport default connect(mapStateToProps,{\n  selectBook: selectBook\n})(BookList);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst BookDetail = props => {\n\n  if(!props.selectedBook){\n    return <div></div>\n  }\n\n  return(\n    <div className=\"ui cards\">\n      <div className=\"card\">\n        <div className=\"content\">\n          <div className=\"header\">{props.selectedBook.title}</div>\n        </div>\n        <div className=\"content\">\n          <div className= \"header\">\n          Author: {props.selectedBook.author}<br/><br/>\n          Genre: {props.selectedBook.genre}<br/><br/>\n          No. Pages: {props.selectedBook.pageNo} <br/><br/>\n          Read: {props.selectedBook.read}\n          </div>\n          <br/>\n          <div className=\"extra content\">\n            <div className=\"ui two buttons\">\n               <a className=\"ui green button\" href={`https://www.goodreads.com/search?utf8=%E2%9C%93&query=${props.selectedBook.title}`} target=\"_blank\" rel=\"noopener noreferrer\">More</a>\n            </div>\n          </div>\n      </div>\n    </div>\n    </div>\n  )\n};\n\nconst mapStateToProps = (state) => {\n  return { selectedBook: state.selectedBook };\n}\nexport default connect(mapStateToProps)(BookDetail);","import React, { useState } from 'react';\nimport Form from './Form';\nimport BookList from './BookList';\nimport BookDetail from './BookDetail';\n\n\nconst App = () => {\n\n  const [state, setState] = useState({\n    seen: false\n  });\n\n  const togglePop = () => {\n    setState({\n      seen: !state.seen\n    });\n  }\n\n  return (\n    <div className=\"main-section\">\n      <div className=\"main-title\">\n        <h1>Book Library</h1>\n        <button className=\"primary ui button\" onClick={togglePop}>\n            Add New Book\n        </button>\n      </div>\n\n      {state.seen ? <Form toggle={togglePop} /> : null} \n      <div className=\"library-section\">\n      <h2 className=\"library-title\">Your Library</h2>\n          <div className=\"ui container grid\">\n            <div className=\"ui row\">\n              <div className=\"column eight wide\">\n                <BookList />\n              </div>\n              <div className=\"column eight wide\">\n                    <BookDetail />\n                </div>   \n            </div>\n          </div>  \n        </div>\n      </div>\n\n  )\n}\n\nexport default App;","import { combineReducers } from 'redux';\nimport bookReducer from './bookReducer';\nimport selectedBookReducer from './selectedBookReducer';\n\n\nexport default combineReducers({ \n  book: bookReducer,\n  selectedBook: selectedBookReducer\n});","export default (state = [], action) => {\n  switch(action.type){\n    case 'FETCH_BOOK':\n      return [...state, action.book];\n    default:\n      return state;\n  }\n};","export default (selectedBook = null, action) => {\n  if(action.type === 'SELECTED_BOOK'){\n    return action.payload;\n  }\n\n  return selectedBook;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./styles.css\";\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport { loadState, saveState } from './localStorage';\nimport reducers from './reducers';\nimport throttle from 'lodash/throttle';\n\nconst persistedState = loadState();\nconst store = createStore(reducers, persistedState, applyMiddleware(thunk));\n\nstore.subscribe(throttle(() => {\n  saveState(\n   store.getState()\n  );\n}, 1000));\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n  ,\n  document.querySelector('#root')\n)","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if(serializedState === null){\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    //Ignore errs\n  }\n}"],"sourceRoot":""}